<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ylzs.dao.system.DictionaryDao">
    <resultMap type="Dictionary" id="DictionaryResult">
        <result column="id" property="id"/>
        <result column="dic_value" property="dicValue"/>
        <result column="value_desc" property="valueDesc"/>
        <result column="seq_num" property="seqNum"/>
        <result column="update_user" property="updateUser"/>
        <result column="update_time" property="updateTime"/>
        <result column="parent_id" property="parentId"/>
        <result column="remark" property="remark"/>
        <result column="parent_dic_value" property="parentDicValue"/>
        <result column="parent_value_desc" property="parentValueDesc"/>
        <result column="py_head_char" property="pyHeadChar"/>
        <result column="dictionary_type_code" property="dictionaryTypeCode"/>
        <result column="parent_code" property="parentCode"/>
        <result column="dic_value_desc" property="dicValueDesc"/>
        <result column="update_user" property="updateUser" />
        <result column="update_time" property="updateTime" />
        <result column="map_key" property="mapKey" />
    </resultMap>

    <select id="getDictionaryByParent" resultMap="DictionaryResult">
        select * from dictionary
        where ifnull(is_invalid, 0)=0 and parent_id in (select id from dictionary where dic_value=#{parentCode} and
        ifnull(parent_id,-1)=ifnull(#{parentId},-1))
        order by seq_num
    </select>
    <select id="getDictionaryByTypeCode" resultMap="DictionaryResult" parameterType="string">
        select value_desc,dic_value,id,CONCAT(dic_value,'.',value_desc) as dic_value_desc from dictionary where IFNULL(is_invalid,0)=0 and dictionary_type_code=#{0}
    </select>

    <delete id="deleteDictionary" parameterType="integer">
        delete from dictionary where id=#{id}
    </delete>

    <update id="updateDictionary">
        UPDATE
        dictionary
        <set>
            <if test="valueDesc != null">
                value_desc = #{valueDesc},
            </if>
            <if test="isInvalid != null">
                is_invalid = #{isInvalid},
            </if>
            <if test="seqNum != null">
                seq_num = #{seqNum},
            </if>
            <if test="updateUser != null">
                update_user = #{updateUser},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="parentId != null">
                parent_id = #{parentId},
            </if>
            <if test="dicValue != null">
                dic_value = #{dicValue},
            </if>
            <if test="remark != null">
                remark = #{remark},
            </if>
            <if test="pyHeadChar != null">
                py_head_char = #{pyHeadChar},
            </if>
            <if test="dictionaryTypeCode != null">
                dictionary_type_code = #{dictionaryTypeCode},
            </if>
        </set>
        WHERE id = #{id};
    </update>

    <insert id="addDictionary" parameterType="Dictionary" useGeneratedKeys="true" keyProperty="id">
        INSERT IGNORE INTO dictionary (
        dic_value,
        value_desc,
        seq_num,
        is_invalid,
        update_user,
        update_time,
        parent_id,
        remark,
        py_head_char,
        dictionary_type_code
        )
        VALUES
        (
        #{dicValue},
        #{valueDesc},
        #{seqNum},
        #{isInvalid},
        #{updateUser},
        #{updateTime},
        #{parentId},
        #{remark},
        #{pyHeadChar},
        #{dictionaryTypeCode}
        ) ;


    </insert>
        <select id="getDictionaryByPage" resultMap="DictionaryResult">
            select a.*,
            b.dic_value parent_dic_value,b.value_desc parent_value_desc
            from dictionary a
            left join dictionary b on a.parent_id=b.id
            where ifnull(a.is_invalid, 0)=0 and ifnull(a.parent_id,-1)=ifnull(#{parentId},-1)
            <if test="keywords!=null and keywords!=''">
                and (a.dic_value like concat('%',#{keywords},'%')
                or a.value_desc like concat('%',#{keywords},'%')
                )
            </if>
            <if test="beginDate != null">
                <![CDATA[   and DATE_FORMAT(a.update_time, '%Y-%m-%d')>=DATE_FORMAT(#{beginDate}, '%Y-%m-%d')   ]]>
            </if>
            <if test="endDate != null">
                <![CDATA[   and DATE_FORMAT(a.update_time, '%Y-%m-%d')<=DATE_FORMAT(#{endDate}, '%Y-%m-%d')   ]]>
            </if>
            order by a.parent_id,a.id
        </select>

<!--    <select id="getDictionaryByPage" resultMap="DictionaryResult">-->
<!--        SELECT a.*,a.dictionary_type_code dic_value,-->
<!--         a.dictionary_type_name value_desc FROM dictionary_type a ORDER a.id-->
<!--    </select>-->

    <select id="getDictionaryById" parameterType="integer" resultMap="DictionaryResult">
        select a.*,b.dic_value parent_dic_value,b.value_desc parent_value_desc
        from dictionary a
        left join dictionary b on a.parent_id=b.id
        where IFNULL(a.is_invalid,0)=0 and a.id=#{id}
    </select>


    <select id="getDictionaryByParentId" parameterType="integer" resultMap="DictionaryResult">
        select a.*,
        b.dic_value parent_dic_value,b.value_desc parent_value_desc
        from dictionary a
        left join dictionary b on a.parent_id=b.id
        where ifnull(a.is_invalid, 0)=0 and a.parent_id=#{parentId} order by a.seq_num
    </select>

    <select id="getLineDictionary" parameterType="integer" resultMap="DictionaryResult">
        select id,line_code dic_value,line_name value_desc from line where ifnull(is_invalid, 0)=0
        <if test="linePositionId != null">
            and line_position_id=#{linePositionId}
        </if>
        <if test="lineNameId != null">
            and line_name_id=#{lineNameId}
        </if>
        order id
    </select>

    <select id="getRoleByUserCode" parameterType="string" resultMap="DictionaryResult">
        select a.* from dictionary a where a.id in (
        select role_id from user_role where user_code=#{userCode}
        )
        order by a.id
    </select>

    <select id="getDictoryValueList" resultType="com.ylzs.vo.DictionaryVo" parameterType="map">
        select dic_value,value_desc from dictionary
        <where>
            <if test="kindCode !=null and kindCode!=''">
                dictionary_type_code = #{kindCode}
            </if>
            <if test="valueDesc!=null and valueDesc!=''">
                and value_desc like concat('%',#{valueDesc},'%')
            </if>
        </where>
    </select>

  <!--  <insert id="addOrUpdate" parameterType="Dictionary">
        insert into dictionary (
        dic_value,value_desc,seq_num, is_invalid,
        update_user,update_time,parent_id,remark,py_head_char,dictionary_type_code,parent_code)
        values (
        #{dicValue}, #{valueDesc},#{seqNum},
        #{isInvalid},#{updateUser},#{updateTime},#{parentId},#{remark},#{pyHeadChar},#{dictionaryTypeCode},#{parentCode})
        on duplicate key update
        dic_value=#{dicValue},
        value_desc=#{valueDesc},
        seq_num=#{seqNum},
        is_invalid=#{isInvalid},
        update_user=#{updateUser},
        update_time=#{updateTime},
        parent_id=#{parentId}
        remark=#{remark},
        py_head_char=#{pyHeadChar},
        dictionary_type_code=#{dictionaryTypeCode},
        parent_code=#{parentCode}
    </insert>-->

    <select id="getAll" resultMap="DictionaryResult">
        select * from dictionary
    </select>

    <select id="getNoParentCode" resultMap="DictionaryResult">
        SELECT d.id,d.dic_value,d.dictionary_type_code,d.value_desc FROM dictionary  d WHERE d.parent_code is null
    </select>

    <insert id="addDictionaryList" parameterType="list">
        insert into dictionary (dic_value,dictionary_type_code,value_desc, parent_code, remark,create_user,create_time,is_invalid) values
        <foreach collection="list" item="item" separator=",">
            (#{item.dicValue},#{item.dictionaryTypeCode},#{item.valueDesc},#{item.parentCode},#{item.remark},#{item.createUser},#{item.createTime},#{item.isInvalid})
        </foreach>
    </insert>


    <update id="updateDictionaryList" parameterType="java.util.List">
        <foreach collection="list"  item="item" separator=";">
            update dictionary set
            dic_value = #{item.dicValue},
            dictionary_type_code = #{item.dictionaryTypeCode},
            value_desc = #{item.valueDesc},
            parent_code = #{item.parentCode}
            where id = #{item.id}
        </foreach>
    </update>

    <select id="getDictoryByValueAndType" resultMap="DictionaryResult">
        select * from dictionary  where dic_value = #{dicValue} and dictionary_type_code = #{dictionaryTypeCode}
    </select>

    <select id="getValueAndTypeCodeAsMapKey" parameterType="java.util.Arrays" resultMap="DictionaryResult">
        select dic_value,value_desc,dictionary_type_code,concat(dic_value,'_',dictionary_type_code)as map_key from dictionary
        <if test="typeCodeList !=null ">
            <where>
                dictionary_type_code in
                <foreach collection="typeCodeList" item="code" open="(" close=")" separator=",">
                    #{code}
                </foreach>
            </where>
        </if>
    </select>

    <select id="getBrandName" resultType="java.lang.String">
        SELECT value_desc FROM `dictionary` WHERE `dictionary_type_code` = 'brand' AND dic_value = #{brandCode}
    </select>

    <select id="getDictionaryMap" resultMap="DictionaryResult">
        select dic_value,value_desc from dictionary where dictionary_type_code=#{dictionaryTypeCode}
    </select>


    <insert id="updateAndAddDictionary" parameterType="java.util.List">
        insert into dictionary(dic_value,dictionary_type_code,value_desc, parent_code, remark,create_user,create_time,is_invalid)
        values
        <foreach collection="dictionaryList" item="item" separator=",">
            (#{item.dicValue},#{item.dictionaryTypeCode},#{item.valueDesc},#{item.parentCode},#{item.remark},#{item.createUser},#{item.createTime},#{item.isInvalid})
        </foreach>
        on duplicate key update
        dic_value= values(dic_value),dictionary_type_code=values(dictionary_type_code),value_desc=values(value_desc),
        parent_code=values(parent_code),remark= values(remark),update_user= values(update_user),update_time = values(update_time),is_invalid = values(is_invalid)
    </insert>
</mapper> 